// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String?
  role          Role         @default(CUSTOMER)
  image         String?
  emailVerified DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  restaurants   Restaurant[]
  orders        Order[]
  cartItems     CartItem[]
  
  @@map("users")
}

model Restaurant {
  id          String     @id @default(cuid())
  name        String
  description String?
  image       String?
  cuisine     String?
  location    String?
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  menuItems   MenuItem[]
  orders      Order[]
  
  @@map("restaurants")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  menuItems MenuItem[]
  
  @@map("categories")
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])
  isAvailable  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  orderItems   OrderItem[]
  cartItems    CartItem[]
  
  @@map("menu_items")
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  total        Float
  status       OrderStatus @default(PENDING)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  orderItems   OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  
  @@map("order_items")
}

model CartItem {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, menuItemId])
  @@map("cart_items")
}